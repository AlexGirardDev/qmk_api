#!/usr/bin/env python3
import json
import requests
from os.path import exists
from sys import argv
from time import sleep, time

if len(argv) < 2:
    print('Usage: %s <json_file> [base_url]')
    exit(1)
else:
    json_file = argv[1]

if not exists(json_file):
    print('*** Could not find file %s!\n' % json_file)
    print('Usage: %s <json_file> [base_url]')
    exit(2)

if len(argv) > 2:
    baseurl = argv[2]
else:
    baseurl = 'http://127.0.0.1:5000/v1/compile'

http = requests.Session()
http.headers.update({'Accept': 'application/json'})
http.headers.update({'User-Agent': 'qmk_compile_api test client v0.1'})

# Prepare our request
json_data = json.load(open(json_file))

# Post our compile job to the API
startTime = time()
compile = http.post(baseurl, json=json_data)
if compile.status_code in [200, 201]:
    job = compile.json()
    print('*** Submitted job', job['job_id'])
else:
    print('*** Could not submit compile job to %s! Code: %s' % (compile.url, compile.status_code))
    for header in sorted(compile.headers):
        print('%s: %s' % (header, compile.headers[header]))
    print()
    print(compile.content.decode(compile.encoding))
    exit(1)

# Watch the progress of our compile job
while True:
    job_status = http.get(baseurl + '/' + job['job_id'])
    if job_status.status_code in [200, 201]:
        job_status = job_status.json()
    else:
        print('*** Could not look up job status at %s! Code: %s' % (job_status.url, job_status.status_code))
        for header in sorted(job_status.headers):
            print('%s: %s' % (header, job_status.headers[header]))
        print()
        print(job_status.content.decode(compile.encoding))
        exit(1)

    if job_status['status'] == 'failed':
        print('*** Compile failed!')
        print(job_status)
        break
    elif job_status['status'] == 'finished':
        print('*** Compile succeeded!')
        print('*** Waited %s seconds for firmware.' % (time() - startTime))
        print('*** Download Hex: %s/%s/hex' % (baseurl, job['job_id']))
        print('*** Download Src: %s/%s/source' % (baseurl, job['job_id']))
        exit(0)
    elif job_status['status'] == 'queued':
        print('*** Status: Queued')
        sleep(2)
    elif job_status['status'] == 'running':
        print('*** Status: Compiling')
        while True:
            job_status = http.get(baseurl + '/' + job['job_id'])
            if job_status.status_code in [200, 201]:
                job_status = job_status.json()
            else:
                print('*** Could not look up job status at %s! Code: %s' % (job_status.url, job_status.status_code))
                for header in sorted(job_status.headers):
                    print('%s: %s' % (header, job_status.headers[header]))
                print()
                print(job_status.content.decode(compile.encoding))
                exit(2)

            if job_status['status'] == 'running':
                sleep(2)
            elif job_status['status'] == 'finished':
                print('*** Compile succeeded!')
                print('*** Waited %s seconds for firmware.' % (time() - startTime))
                print('*** Download Hex: %s/%s/hex' % (baseurl, job['job_id']))
                print('*** Download Src: %s/%s/source' % (baseurl, job['job_id']))
                exit(0)
            elif job_status['status'] == 'failed':
                print('*** Compile failed!')
                print(job_status)
                break
            else:
                break
        break
    else:
        print('*** Unknown job status!')
        print(job_status)
        sleep(2)
